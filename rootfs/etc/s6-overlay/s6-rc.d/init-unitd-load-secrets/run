#!/command/with-contenv bash
# shellcheck shell=bash

# Enable nullglob so the loop skips if there are no matching files
shopt -s nullglob

build_env_json_payload() {
    local normalized_secrets_path="${1:?Path to normalized secrets directory is required}"
    local secret var_name content
    local json_string

    local env_values=()

    # Iterate over each file in the directory safely
    while IFS= read -r -d '' secret; do
        var_name=$(basename "${secret}")

        # Read content with proper newline handling
        content=$(
            cat "${secret}"
            printf X
        )
        content="${content%X}" # Remove trailing X added for newline preservation

        # Store as key/value pair for JSON processing
        env_values+=("${var_name}" "${content}")
    done < <(find "${normalized_secrets_path}" -type f -print0)

    # Build JSON using jq with null-delimited input
    json_string=$(printf "%s\0" "${env_values[@]}" |
        jq -Rs '
            split("\u0000") |
            [.[] | select(. != "")] |
            . as $array |
            reduce range(0; length/2) as $i (
                {};
                . + {($array[2*$i]): $array[2*$i + 1]}
            )
        ')

    echo "${json_string}"
}

# init-unitd-load-secrets main
main() {
    set -e

    # Build JSON payload from secrets
    local json_payload
    json_payload=$(build_env_json_payload "/var/run/s6/container_environment/")

    if [ -z "${json_payload}" ] || [ "${json_payload}" == "{}" ]; then
        echo "No secrets found to load into NGINX Unit"
        return 0
    fi

    local app_name="${UNIT_APP_NAME:?}"
    unitctl "${json_payload}" "config/applications/${app_name}/environment"

    # shellcheck disable=SC2181
    if [ "${?}" -ne 0 ]; then
        echo "Error: Failed to load secrets into NGINX Unit"
        return 1
    fi

    echo "Secrets loaded into NGINX Unit"

    return 0
}

main
